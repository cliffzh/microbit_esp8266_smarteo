<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id=":pIbM|/PuxpAYsB$LDV5" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="p7qu/^4)/|3f2GFb?r%3" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ESP8266Smarteo {" line1="    " line2="    function sendAT(command : string, wait : number = 0) {" line3="        serial.writeString(command + &quot;\u000D\u000A&quot;)" line4="        basic.pause(wait)" line5="    }" line6="" line7="    function handleCommand(commands : string) {" line8="        if (commands.includes(&quot;allumer_led&quot;)) {" line9="            basic.clearScreen()" line10="            basic.showIcon(IconNames.Square)" line11="        }" line12="        else if (commands.includes(&quot;eteindre_led&quot;)) {" line13="            basic.clearScreen()" line14="        }" line15="        else if (commands.includes(&quot;fermer&quot;)) {" line16="            sendAT(&quot;AT+CIPCLOSE&quot;, 1000)" line17="        }" line18="    }" line19="" line20="    function resetESP() {" line21="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line22="        sendAT(&quot;AT+RST&quot;, 1000) // reset the module" line23="        do {" line24="            sendAT(&quot;AT&quot;, 500) // test command" line25="            let response = serial.readString()" line26="            if (response.includes(&quot;OK&quot;)) {" line27="                basic.showIcon(IconNames.Yes)" line28="                basic.pause(2000)" line29="                break // Sortir de la boucle si la réponse est OK" line30="            } else {" line31="                basic.showIcon(IconNames.No)" line32="                basic.pause(2000) // Attendre avant de réessayer" line33="            }" line34="        } while (true) // Boucle infinie jusqu'à ce que la condition soit remplie" line35="        sendAT(&quot;AT+CWMODE=1&quot;) // set to station mode" line36="    }" line37="    " line38="    /**" line39="     * Initialize ESP8266 module" line40="     */" line41="    //% block='set ESP8266 Tx %tx Rx %rx Baudrate %baudrate'" line42="    //% tx.defl='SerialPin.P14'" line43="    //% rx.defl='SerialPin.P0'" line44="    //% baudrate.defl='baudrate.BaudRate115200'" line45="    export function initesp8266(tx : SerialPin, rx : SerialPin, baudrate : BaudRate) {" line46="            serial.redirect(tx, rx, BaudRate.BaudRate115200)" line47="            serial.setTxBufferSize(128)" line48="            serial.setRxBufferSize(128)" line49="            do {" line50="                sendAT(&quot;AT&quot;, 500)" line51="                let test = serial.readString()" line52="                if (test.includes(&quot;OK&quot;)) {" line53="                    basic.showIcon(IconNames.Duck)" line54="                    basic.pause(2000)" line55="                    break" line56="                }" line57="                else {" line58="                    basic.showIcon(IconNames.Snake)" line59="                    basic.pause(2000)" line60="                }" line61="            } while (true)" line62="            resetESP()" line63="    }" line64="    " line65="" line66="    /**" line67="     * Connect to Wifi router" line68="     */" line69="    //% block='Connect Wifi SSID %ssid password %password ip address %ip_address'" line70="    //% ssid.defl='Smarteo'" line71="    //% password.defl='%Smarteo123'" line72="    //% ip_address.defl='192.168.1.30'" line73="    export function connectToWifi(ssid : string, password : string, ip_address : string) {" line74="        sendAT(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + password + &quot;\&quot;&quot;, 0)" line75="        let response2 = serial.readString()" line76="        if (response2.includes(&quot;OK&quot;)) {" line77="            basic.showIcon(IconNames.Happy)" line78="            basic.pause(3000)" line79="            sendAT(&quot;AT+CIPSTA=\&quot;&quot; + ip_address + &quot;\&quot;&quot;, 0)" line80="            let responseip = serial.readString()" line81="            if (responseip.includes(&quot;OK&quot;)) {" line82="                basic.showIcon(IconNames.Surprised)" line83="                basic.pause(2000)" line84="            } " line85="            else {" line86="                basic.showIcon(IconNames.Silly)" line87="                basic.pause(2000)" line88="            }" line89="        }" line90="        else if (response2.includes(&quot;ERROR&quot;)) {" line91="            basic.showIcon(IconNames.Angry)" line92="            basic.pause(2000)" line93="        }" line94="    }" line95="    /**" line96="     * Connect to a tcp server" line97="     */" line98="    //% block='Connect tcp serveur %serverIP and port %port'" line99="    //% serverIP.defl='127.0.0.1'" line100="    //% port.defl='8080'" line101="    export function connectTCPServer (serverIP : string, port : string) {" line102="        sendAT(&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;&quot; + serverIP + &quot;\&quot;,&quot; + port, 5000);" line103="        let connectResponse = serial.readString()" line104="        if (connectResponse.includes(&quot;OK&quot;)) {" line105="            basic.showIcon(IconNames.Heart)" line106="            let identificationMessage = &quot;IDENTIFY: Microbit&quot;" line107="            sendAT(&quot;AT+CIPSEND=&quot; + identificationMessage.length)" line108="            sendAT(identificationMessage)" line109="        }" line110="        else if (connectResponse.includes(&quot;ERROR&quot;)) {" line111="            basic.showIcon(IconNames.Sad)" line112="            return" line113="        }" line114="    }" line115="" line116="    /**" line117="     * Send data on button press" line118="     */" line119="    //% block='Send data %data on button %button'" line120="    //% data.defl='Hello, World !'" line121="    //% button.defl='Button.A'" line122="    export function sendDataOnButtonPress (data : string, button : Button) {" line123="        input.onButtonPressed(button, function() {" line124="            let fullmessage = data + &quot;\n&quot;" line125="            sendAT(&quot;AT+CIPSEND=&quot; + fullmessage.length)" line126="            sendAT(fullmessage)" line127="        })" line128="    }" line129="" line130="    /**" line131="     * Close TCP connection" line132="     */" line133="    //% block" line134="    export function closeTCPConnection() {" line135="        sendAT(&quot;AT+CIPCLOSE&quot;, 1000)" line136="    }" line137="" line138="    /**" line139="     * Listen for commands " line140="     */" line141="    //% block" line142="    export function listenMatrix() {" line143="        while (true) {" line144="            let response3 = serial.readString()" line145="            if(response3) {" line146="                handleCommand(response3)" line147="            }" line148="            basic.pause(100)" line149="        }" line150="    }" line151="    /**" line152="     * Send Accelerometer Data" line153="     */" line154="    //% block" line155="    export function sendAccelerometerData() {" line156="        let accX = input.acceleration(Dimension.X)" line157="        let accY = input.acceleration(Dimension.Y)" line158="        let accZ = input.acceleration(Dimension.Z)" line159="        let accData = `ACCEL:${accX},${accY},${accZ}\n`" line160="        sendAT(&quot;AT+CIPSEND=&quot; + accData.length)" line161="        sendAT(accData)" line162="    }" line163="" line164="    /**" line165="     * Send temperature Data" line166="     */" line167="    //% block" line168="    export function sendTemperatureData() {" line169="        let tempData = `TEMP:${input.temperature()}\n`" line170="        sendAT(&quot;AT+CIPSEND=&quot; + tempData.length)" line171="        sendAT(tempData)" line172="    }" line173="" line174="    /**" line175="     * Send brightness data" line176="     */" line177="    //% block" line178="    export function sendBrightnessData() {" line179="        let brightData = `LIGHT:${input.lightLevel()}\n`" line180="        sendAT(&quot;AT+CIPSEND=&quot; + brightData.length)" line181="        sendAT(brightData)" line182="    }" line183="" line184="    /**" line185="     * Send Compass Data" line186="     */" line187="    //% block" line188="    export function sendCompassData() {" line189="        let compassData = `COMPASS:${input.compassHeading()}\n`" line190="        sendAT(&quot;AT+CIPSEND=&quot; + compassData.length)" line191="        sendAT(compassData)" line192="    } " line193="}" numlines="194"></mutation></block></statement></block></xml>