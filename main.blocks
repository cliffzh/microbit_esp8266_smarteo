<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="e0|kuut{?dxOpqw|}u4A" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="|pURU]SPYH(^ZBJYQx~E" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ESP8266Smarteo {" line1="    " line2="    function sendAT(command : string, wait : number = 0) {" line3="        serial.writeString(command + &quot;\u000D\u000A&quot;)" line4="        basic.pause(wait)" line5="    }" line6="" line7="    function handleCommand(commands : string) {" line8="        if (commands.includes(&quot;allumer_led&quot;)) {" line9="            basic.clearScreen()" line10="            basic.showIcon(IconNames.Square)" line11="        }" line12="        else if (commands.includes(&quot;eteindre_led&quot;)) {" line13="            basic.clearScreen()" line14="        }" line15="    }" line16="" line17="    function resetESP() {" line18="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line19="        sendAT(&quot;AT+RST&quot;, 1000) // reset the module" line20="        do {" line21="            sendAT(&quot;AT&quot;, 500) // test command" line22="            let response = serial.readString()" line23="            if (response.includes(&quot;OK&quot;)) {" line24="                basic.showIcon(IconNames.Yes)" line25="                basic.pause(2000)" line26="                break // Sortir de la boucle si la réponse est OK" line27="            } else {" line28="                basic.showIcon(IconNames.No)" line29="                basic.pause(2000) // Attendre avant de réessayer" line30="            }" line31="        } while (true) // Boucle infinie jusqu'à ce que la condition soit remplie" line32="        sendAT(&quot;AT+CWMODE=1&quot;) // set to station mode" line33="    }" line34="    " line35="    /**" line36="     * Initialize ESP8266 module" line37="     */" line38="    //% block='set ESP8266 Tx %tx Rx %rx Baudrate %baudrate'" line39="    //% tx.defl='SerialPin.P14'" line40="    //% rx.defl='SerialPin.P0'" line41="    //% baudrate.defl='baudrate.BaudRate115200'" line42="    export function initesp8266(tx : SerialPin, rx : SerialPin, baudrate : BaudRate) {" line43="            serial.redirect(tx, rx, BaudRate.BaudRate115200)" line44="            serial.setTxBufferSize(128)" line45="            serial.setRxBufferSize(128)" line46="            do {" line47="                sendAT(&quot;AT&quot;, 500)" line48="                let test = serial.readString()" line49="                if (test.includes(&quot;OK&quot;)) {" line50="                    basic.showIcon(IconNames.Duck)" line51="                    basic.pause(2000)" line52="                    break" line53="                }" line54="                else {" line55="                    basic.showIcon(IconNames.Snake)" line56="                    basic.pause(2000)" line57="                }" line58="            } while (true)" line59="            resetESP()" line60="    }" line61="    " line62="" line63="    /**" line64="     * Connect to Wifi router" line65="     */" line66="    //% block='Connect Wifi SSID %ssid password %password ip address %ip_address'" line67="    //% ssid.defl='Smarteo'" line68="    //% password.defl='%Smarteo123'" line69="    //% ip_address.defl='192.168.1.30'" line70="    export function connectToWifi(ssid : string, password : string, ip_address : string) {" line71="        sendAT(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + password + &quot;\&quot;&quot;, 0)" line72="        let response2 = serial.readString()" line73="        if (response2.includes(&quot;OK&quot;)) {" line74="            basic.showIcon(IconNames.Happy)" line75="            basic.pause(3000)" line76="            sendAT(&quot;AT+CIPSTA=\&quot;&quot; + ip_address + &quot;\&quot;&quot;, 0)" line77="            let responseip = serial.readString()" line78="            if (responseip.includes(&quot;OK&quot;)) {" line79="                basic.showIcon(IconNames.Surprised)" line80="                basic.pause(2000)" line81="            } " line82="            else {" line83="                basic.showIcon(IconNames.Silly)" line84="                basic.pause(2000)" line85="            }" line86="        }" line87="        else if (response2.includes(&quot;ERROR&quot;)) {" line88="            basic.showIcon(IconNames.Angry)" line89="            basic.pause(2000)" line90="        }" line91="    }" line92="    /**" line93="     * Connect to a tcp server" line94="     */" line95="    //% block='Connect tcp serveur %serverIP and port %port'" line96="    //% serverIP.defl='127.0.0.1'" line97="    //% port.defl='8080'" line98="    export function connectTCPServer (serverIP : string, port : string) {" line99="        sendAT(&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;&quot; + serverIP + &quot;\&quot;,&quot; + port, 5000);" line100="        let connectResponse = serial.readString()" line101="        if (connectResponse.includes(&quot;OK&quot;)) {" line102="            basic.showIcon(IconNames.Heart)" line103="        }" line104="        else {" line105="            basic.showIcon(IconNames.Sad)" line106="            return" line107="        }" line108="    }" line109="" line110="    /**" line111="     * Send data on button press" line112="     */" line113="    //% block='Send data %data on button %button'" line114="    //% data.defl='Hello, World !'" line115="    //% button.defl='Button.A'" line116="    export function sendDataOnButtonPress (data : string, button : Button) {" line117="        input.onButtonPressed(button, function() {" line118="            let datalength = data.length" line119="            sendAT(&quot;AT+CIPSEND=&quot; + datalength)" line120="            sendAT(data, 1000)" line121="        })" line122="    }" line123="" line124="    /**" line125="     * Close TCP connection" line126="     */" line127="    //% block" line128="    export function closeTCPConnection() {" line129="        sendAT(&quot;AT+CIPCLOSE&quot;, 1000);" line130="    }" line131="" line132="    /**" line133="     * Listen for commands " line134="     */" line135="    //% block" line136="    export function listenMatrix() {" line137="        while (true) {" line138="            let response3 = serial.readString()" line139="            if(response3) {" line140="                handleCommand(response3)" line141="            }" line142="            basic.pause(100)" line143="        }" line144="    }" line145="}" numlines="146"></mutation></block></statement></block></xml>