<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Kt)bVz!!0t:j0GT)D+B(" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="N/,z~+j|O2C-D1Jn^Eq," editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ESP8266Smarteo {" line1="    " line2="    function sendAT(command : string, wait : number = 0) {" line3="        serial.writeString(command + &quot;\u000D\u000A&quot;)" line4="        basic.pause(wait)" line5="    }" line6="" line7="    function resetESP() {" line8="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line9="        sendAT(&quot;AT+RST&quot;, 1000) // reset the module" line10="        do {" line11="            sendAT(&quot;AT&quot;, 500) // test command" line12="            let response = serial.readString()" line13="            if (response.includes(&quot;OK&quot;)) {" line14="                basic.showIcon(IconNames.Yes)" line15="                basic.pause(2000)" line16="                break // Sortir de la boucle si la réponse est OK" line17="            } else {" line18="                basic.showIcon(IconNames.No)" line19="                basic.pause(2000) // Attendre avant de réessayer" line20="            }" line21="        } while (true) // Boucle infinie jusqu'à ce que la condition soit remplie" line22="        sendAT(&quot;AT+CWMODE=1&quot;) // set to station mode" line23="    }" line24="    " line25="    /**" line26="     * Initialize ESP8266 module" line27="     */" line28="    //% block='set ESP8266 Tx %tx Rx %rx Baudrate %baudrate'" line29="    //% tx.defl='SerialPin.P14'" line30="    //% rx.defl='SerialPin.P0'" line31="    //% baudrate.defl='baudrate.BaudRate115200'" line32="    export function initesp8266(tx : SerialPin, rx : SerialPin, baudrate : BaudRate) {" line33="            serial.redirect(tx, rx, BaudRate.BaudRate115200)" line34="            serial.setTxBufferSize(128)" line35="            serial.setRxBufferSize(128)" line36="            do {" line37="                sendAT(&quot;AT&quot;, 500)" line38="                let test = serial.readString()" line39="                if (test.includes(&quot;OK&quot;)) {" line40="                    basic.showIcon(IconNames.Duck)" line41="                    basic.pause(2000)" line42="                    break" line43="                }" line44="                else {" line45="                    basic.showIcon(IconNames.Snake)" line46="                    basic.pause(2000)" line47="                }" line48="            } while (true)" line49="            resetESP()" line50="    }" line51="    " line52="" line53="    /**" line54="     * Connect to Wifi router" line55="     */" line56="    //% block='Connect Wifi SSID %ssid password %password ip address %ip_address'" line57="    //% ssid.defl='Smarteo'" line58="    //% password.defl='%Smarteo123'" line59="    //% ip_address.defl='192.168.1.30'" line60="    export function connectToWifi(ssid : string, password : string, ip_address : string) {" line61="        sendAT(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + password + &quot;\&quot;&quot;, 0)" line62="        let response2 = serial.readString()" line63="        if (response2.includes(&quot;OK&quot;)) {" line64="            basic.showIcon(IconNames.Happy)" line65="            basic.pause(3000)" line66="            sendAT(&quot;AT+CIPSTA=\&quot;&quot; + ip_address + &quot;\&quot;&quot;, 0)" line67="            let responseip = serial.readString()" line68="            if (responseip.includes(&quot;OK&quot;)) {" line69="                basic.showIcon(IconNames.Surprised)" line70="                basic.pause(2000)" line71="            } " line72="            else {" line73="                basic.showIcon(IconNames.Silly)" line74="                basic.pause(2000)" line75="            }" line76="        }" line77="        else if (response2.includes(&quot;ERROR&quot;)) {" line78="            basic.showIcon(IconNames.Angry)" line79="            basic.pause(2000)" line80="        }" line81="    }" line82="    /**" line83="     * Connect to a tcp server" line84="     */" line85="    //% block='Connect tcp serveur %serverIP'" line86="    //% serverIP.defl='127.0.0.1'" line87="    export function connectAndSendTCP (serverIP : string) {" line88="        sendAT(&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;&quot;+ serverIP + &quot;\&quot;,8080&quot; + &quot;\&quot;&quot;, 0)" line89="        let connectResponse = serial.readString()" line90="        if (connectResponse.includes(&quot;OK&quot;)) {" line91="            basic.showIcon(IconNames.Heart)" line92="        }" line93="        else {" line94="            basic.showIcon(IconNames.Sad)" line95="            return" line96="        }" line97="    }" line98="}" numlines="99"></mutation></block></statement></block></xml>