<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="x=n]:6O3A:9#sFGvm=i|" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="N;n^!Y73j8HM3o8a2zFi" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ESP8266Smarteo {" line1="" line2="    let serverIP: string = &quot;&quot;" line3="    let serverPort: string = &quot;&quot;" line4="    function sendAT(command: string, wait: number = 0) {" line5="        serial.writeString(command + &quot;\u000D\u000A&quot;)" line6="        basic.pause(wait)" line7="    }" line8="" line9="    function handleCommand(commands: string) {" line10="        if (commands.includes(&quot;allumer_led&quot;)) {" line11="            basic.clearScreen()" line12="            basic.showIcon(IconNames.Square)" line13="        }" line14="        else if (commands.includes(&quot;eteindre_led&quot;)) {" line15="            basic.clearScreen()" line16="        }" line17="        else if (commands.includes(&quot;fermer&quot;)) {" line18="            sendAT(&quot;AT+CIPCLOSE&quot;, 1000)" line19="            basic.showIcon(IconNames.Umbrella)" line20="            connectTCPServer(serverIP, serverPort)" line21="        }" line22="    }" line23="" line24="    function resetESP() {" line25="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line26="        sendAT(&quot;AT+RST&quot;, 1000) // reset the module" line27="        do {" line28="            sendAT(&quot;AT&quot;, 500) // test command" line29="            let response = serial.readString()" line30="            if (response.includes(&quot;OK&quot;)) {" line31="                basic.showIcon(IconNames.Yes)" line32="                basic.pause(2000)" line33="                break // Sortir de la boucle si la réponse est OK" line34="            } else {" line35="                basic.showIcon(IconNames.No)" line36="                basic.pause(2000) // Attendre avant de réessayer" line37="            }" line38="        } while (true) // Boucle infinie jusqu'à ce que la condition soit remplie" line39="        sendAT(&quot;AT+CWMODE=1&quot;) // set to station mode" line40="    }" line41="" line42="    /**" line43="     * Initialize ESP8266 module" line44="     */" line45="    //% block='set ESP8266 Tx %tx Rx %rx Baudrate %baudrate'" line46="    //% tx.defl='SerialPin.P14'" line47="    //% rx.defl='SerialPin.P0'" line48="    //% baudrate.defl='baudrate.BaudRate115200'" line49="    export function initesp8266(tx: SerialPin, rx: SerialPin, baudrate: BaudRate) {" line50="        serial.redirect(tx, rx, BaudRate.BaudRate115200)" line51="        serial.setTxBufferSize(128)" line52="        serial.setRxBufferSize(128)" line53="        do {" line54="            sendAT(&quot;AT&quot;, 500)" line55="            let test = serial.readString()" line56="            if (test.includes(&quot;OK&quot;)) {" line57="                basic.showIcon(IconNames.Duck)" line58="                basic.pause(2000)" line59="                break" line60="            }" line61="            else {" line62="                basic.showIcon(IconNames.Snake)" line63="                basic.pause(2000)" line64="            }" line65="        } while (true)" line66="        resetESP()" line67="    }" line68="" line69="" line70="    /**" line71="     * Connect to Wifi router" line72="     */" line73="    //% block='Connect Wifi SSID %ssid password %password ip address %ip_address'" line74="    //% ssid.defl='Smarteo'" line75="    //% password.defl='%Smarteo123'" line76="    //% ip_address.defl='192.168.1.30'" line77="    export function connectToWifi(ssid: string, password: string, ip_address: string) {" line78="        sendAT(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + password + &quot;\&quot;&quot;, 0)" line79="        let response2 = serial.readString()" line80="        if (response2.includes(&quot;OK&quot;)) {" line81="            basic.showIcon(IconNames.Happy)" line82="            basic.pause(3000)" line83="            sendAT(&quot;AT+CIPSTA=\&quot;&quot; + ip_address + &quot;\&quot;&quot;, 0)" line84="            let responseip = serial.readString()" line85="            if (responseip.includes(&quot;OK&quot;)) {" line86="                basic.showIcon(IconNames.Surprised)" line87="                basic.pause(2000)" line88="            }" line89="            else {" line90="                basic.showIcon(IconNames.Silly)" line91="                basic.pause(2000)" line92="            }" line93="        }" line94="        else if (response2.includes(&quot;ERROR&quot;)) {" line95="            basic.showIcon(IconNames.Angry)" line96="            basic.pause(2000)" line97="        }" line98="    }" line99="    /**" line100="     * Connect to a tcp server" line101="     */" line102="    //% block='Connect tcp serveur %serverIP and port %port'" line103="    //% serverIP.defl='127.0.0.1'" line104="    //% port.defl='8080'" line105="    export function connectTCPServer(ip: string, port: string) {" line106="        serverIP = ip" line107="        serverPort = port" line108="        sendAT(&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;&quot; + serverIP + &quot;\&quot;,&quot; + port, 5000);" line109="        let connectResponse = serial.readString()" line110="        if (connectResponse.includes(&quot;OK&quot;)) {" line111="            basic.showIcon(IconNames.Heart)" line112="            let identificationMessage = &quot;IDENTIFY: Microbit&quot;" line113="            sendAT(&quot;AT+CIPSEND=&quot; + identificationMessage.length)" line114="            sendAT(identificationMessage)" line115="        }" line116="        else if (connectResponse.includes(&quot;ERROR&quot;)) {" line117="            basic.showIcon(IconNames.Sad)" line118="            return" line119="        }" line120="    }" line121="" line122="    /**" line123="     * Send data on button press" line124="     */" line125="    //% block='Send data %data on button %button'" line126="    //% data.defl='Hello, World !'" line127="    //% button.defl='Button.A'" line128="    export function sendDataOnButtonPress(data: string, button: Button) {" line129="        input.onButtonPressed(button, function () {" line130="            let fullmessage = data + &quot;\n&quot;" line131="            sendAT(&quot;AT+CIPSEND=&quot; + fullmessage.length)" line132="            sendAT(fullmessage)" line133="        })" line134="    }" line135="" line136="    /**" line137="     * Close TCP connection" line138="     */" line139="    //% block" line140="    export function closeTCPConnection() {" line141="        sendAT(&quot;AT+CIPCLOSE&quot;, 1000)" line142="    }" line143="" line144="    /**" line145="     * Listen for commands " line146="     */" line147="    //% block" line148="    export function listenCommands() {" line149="        while (true) {" line150="            let response3 = serial.readString()" line151="            if (response3) {" line152="                handleCommand(response3)" line153="            }" line154="            basic.pause(100)" line155="        }" line156="    }" line157="    /**" line158="     * Send Accelerometer Data" line159="     */" line160="    //% block" line161="    export function sendAccelerometerData() {" line162="        let accX = input.acceleration(Dimension.X)" line163="        let accY = input.acceleration(Dimension.Y)" line164="        let accZ = input.acceleration(Dimension.Z)" line165="        let accData = `ACCEL:${accX},${accY},${accZ}\n`" line166="        sendAT(&quot;AT+CIPSEND=&quot; + accData.length)" line167="        sendAT(accData)" line168="    }" line169="" line170="    /**" line171="     * Send temperature Data" line172="     */" line173="    //% block" line174="    export function sendTemperatureData() {" line175="        let tempData = `TEMP:${input.temperature()}\n`" line176="        sendAT(&quot;AT+CIPSEND=&quot; + tempData.length)" line177="        sendAT(tempData)" line178="    }" line179="" line180="    /**" line181="     * Send brightness data" line182="     */" line183="    //% block" line184="    export function sendBrightnessData() {" line185="        let brightData = `LIGHT:${input.lightLevel()}\n`" line186="        sendAT(&quot;AT+CIPSEND=&quot; + brightData.length)" line187="        sendAT(brightData)" line188="    }" line189="" line190="    /**" line191="     * Send Compass Data" line192="     */" line193="    //% block" line194="    export function sendCompassData() {" line195="        let compassData = `COMPASS:${input.compassHeading()}\n`" line196="        sendAT(&quot;AT+CIPSEND=&quot; + compassData.length)" line197="        sendAT(compassData)" line198="    }" line199="}" numlines="200"></mutation></block></statement></block></xml>